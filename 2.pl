% Отношение 1: Определение максимума списка

max_list([X], X).
max_list([H|T], H) :- max_list(T, Max), H >= Max.
max_list([H|T], Max) :- max_list(T, Max), H < Max.

% Декларативно:
%   max_list(List, Max) означает, что Max — максимальный элемент списка List.
%
% Процедурно:
%   - Если список из одного элемента, то этот элемент и есть максимум.
%   - Иначе рекурсивно находим максимум хвоста списка,
%     затем сравниваем с головой и выбираем больший.
% ---------------------------
% Отношение 2: Удаление первого вхождения элемента из списка

remove_first(_, [], []).
remove_first(Elem, [Elem|T], T) :- !.  % Только первое вхождение удаляется
remove_first(Elem, [H|T], [H|R]) :-
    remove_first(Elem, T, R).

% Декларативно:
%   remove_first(Elem, List, Result) означает, что Result — это список List,
%   но с удалённым первым вхождением Elem.
%
% Процедурно:
%   - Рекурсивно перебираем элементы списка.
%   - Если голова списка равна Elem, удаляем её и завершаем (за счёт отсечки !).
%   - Иначе сохраняем голову и продолжаем обработку хвоста.
% ---------------------------
% Задание: Удалить первое вхождение максимального элемента списка

remove_max(List, Result) :-
    max_list(List, Max),
    remove_first(Max, List, Result).

% Декларативно:
%   remove_max(List, Result) означает, что Result — список List
%   с удалённым первым вхождением максимума.
%
% Процедурно:
%   - Сначала находим максимум списка с помощью max_list.
%   - Затем удаляем первое вхождение этого максимума с помощью remove_first.

% Пример работы программы:
% ?- remove_max([1, 5, 3, 7, 4], Result).
% Result = [1, 5, 3, 4].